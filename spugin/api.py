from pathlib import Path

import requests

from . import settings
from .utils import Utils


class SpigetAPI:
    headers: dict = {
        "user-agent": settings.USER_AGENT,
    }

    @staticmethod
    def build_api_url(api_request: str) -> str:
        return f"{settings.API_URL}{api_request}"

    # noinspection PyDefaultArgument
    def call_api(self, api_request: str, params: dict = {}) -> requests.Response:
        response: requests.Response = requests.get(
            self.build_api_url(api_request),
            params=params,
        )
        return response

    def get_plugin_id(self, plugin_name: str) -> int or None:
        response = self.call_api(
            f"/search/resources/{plugin_name}",
            {
                "field": "name",
                "sort": "-downloads",
                "fields": "id,",
            },
        )

        if response.status_code == 404:
            return None

        try:
            plugin_id: int = response.json()[0].get("id")
        except IndexError:
            return None

        return plugin_id

    def get_latest_version(self, plugin_name: str) -> dict:
        # TODO
        self.call_api()

    def download_plugin(self, plugin_name: str) -> dict:
        """
        Download a plugin

        :param plugin_name: The human readable name of the plugin
        :return: dict as generated by Utils.status_dict
        """
        plugin_id = self.get_plugin_id(plugin_name)
        if not plugin_id:
            return Utils.status_dict(False, f"Plugin {plugin_name} not found!")

        response = self.call_api(
            f"/resources/{plugin_id}/download",
        )

        safe_plugin_name = Utils.create_jar_name(plugin_name)
        with open(Path(f"./{safe_plugin_name}.jar").__str__(), "wb") as f:
            f.write(response.content)
            pass

        return Utils.status_dict(True)
